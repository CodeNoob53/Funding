import axios from 'axios';

// –ë–∞–∑–æ–≤–∏–π URL API v4
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "https://open-api-v4.coinglass.com";
const API_KEY = import.meta.env.VITE_API_KEY || "";

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API
const ENDPOINTS = {
  // –ü–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥—É –ø–æ –±—ñ—Ä–∂–∞—Ö
  FUNDING_RATES: "/api/futures/fundingRate/exchange-list",
  
  // –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ñ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥—É –∑–∞ –ø–µ—Ä—ñ–æ–¥
  CUMULATIVE_FUNDING: "/api/futures/fundingRate/cumulative-exchange-list",
  
  // –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥—É
  FUNDING_HISTORY: "/api/futures/funding-rate/history",
  
  // –†–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç (—Ü—ñ–Ω–∞, –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, –æ–±'—î–º —Ç–æ—Ä–≥—ñ–≤)
  COINS_MARKETS: "/api/futures/coins-markets",
  
  // –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –±—ñ—Ä–∂—ñ —Ç–∞ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏
  SUPPORTED_EXCHANGES_PAIRS: "/api/futures/supported-exchange-and-pairs",
  
  // –ü–æ—Ç–æ—á–Ω—ñ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É
  ORDER_BOOK: "/api/futures/orderbook/bid-ask"
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
const createRequestConfig = () => {
  const config = {
    headers: {
      'accept': 'application/json',
      'CG-API-KEY': API_KEY
    }
  };
  
  console.log('üîë –ó–∞–ø–∏—Ç –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ API –∫–ª—é—á–µ–º:', API_KEY ? `${API_KEY.substring(0, 4)}...${API_KEY.substring(API_KEY.length - 4)}` : '–í–Ü–î–°–£–¢–ù–Ü–ô –ö–õ–Æ–ß');
  
  return config;
};

/**
 * –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API
 */
export const testApiConnection = async () => {
  try {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ API Coinglass...');
    console.log(`üåê URL: ${API_BASE_URL}/api/futures/fundingRate/exchange-list`);
    
    if (!API_KEY) {
      console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ! –ó–∞–ø–∏—Ç –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.');
      return { success: false, error: 'API_KEY –Ω–µ –Ω–∞–¥–∞–Ω–æ' };
    }
    
    const startTime = Date.now();
    const response = await axios.get(`${API_BASE_URL}${ENDPOINTS.FUNDING_RATES}`, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', Object.keys(response.data));
    
    if (response.data && response.data.success) {
      console.log('‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π!');
      console.log(`üìà –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è ${Object.keys(response.data.data).length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`);
      
      // –í–∏–≤–æ–¥–∏–º–æ –ø—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä—à–∏—Ö 2-—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      const sampleKeys = Object.keys(response.data.data).slice(0, 2);
      console.log('üìã –ó—Ä–∞–∑–æ–∫ –¥–∞–Ω–∏—Ö:');
      sampleKeys.forEach(key => {
        console.log(`- ${key}:`, response.data.data[key]);
      });
      
      return { success: true, data: response.data.data };
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', response.data);
      return { success: false, error: response.data };
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ API:', error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    } else if (error.request) {
      console.error('üì° –ó–∞–ø–∏—Ç –±—É–≤ –∑—Ä–æ–±–ª–µ–Ω–∏–π, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞');
      console.error('üì° –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É:', error.request);
    } else {
      console.error('üì° –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É:', error.message);
    }
    
    return { success: false, error: error.toString(), details: error.response?.data };
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥—É –ø–æ –≤—Å—ñ—Ö –±—ñ—Ä–∂–∞—Ö
 */
export const fetchFundingRates = async () => {
  try {
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥—É...');
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    const startTime = Date.now();
    const response = await axios.get(`${API_BASE_URL}${ENDPOINTS.FUNDING_RATES}`, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.success && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ñ–∞–Ω–¥–∏–Ω–≥');
      console.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è ${Object.keys(response.data.data).length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`);
      
      const formattedData = formatFundingData(response.data.data);
      console.log(`üìà –î–∞–Ω—ñ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è ${formattedData.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`);
      
      return formattedData;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ñ–∞–Ω–¥–∏–Ω–≥:', error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥—É
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "BTC")
 * @param {string} exchange - –ë—ñ—Ä–∂–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Binance")
 * @param {string} interval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "1d" –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫)
 */
export const fetchFundingHistory = async (symbol, exchange = "Binance", interval = "1d") => {
  try {
    console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ñ–∞–Ω–¥–∏–Ω–≥—É –¥–ª—è ${symbol} –Ω–∞ ${exchange} (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${interval})...`);
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    // –î–æ–¥–∞—î–º–æ USDT –¥–æ —Å–∏–º–≤–æ–ª—É, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –º–∞—î —Å—É—Ñ—ñ–∫—Å—É
    const fullSymbol = symbol.includes('USDT') ? symbol : `${symbol}USDT`;
    
    const url = `${API_BASE_URL}${ENDPOINTS.FUNDING_HISTORY}?symbol=${fullSymbol}&exchange=${exchange}&interval=${interval}`;
    console.log(`üåê URL –∑–∞–ø–∏—Ç—É: ${url}`);
    
    const startTime = Date.now();
    const response = await axios.get(url, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.code === "0" && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ñ–∞–Ω–¥–∏–Ω–≥—É');
      console.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ ${response.data.data.length} –∑–∞–ø–∏—Å—ñ–≤`);
      
      // –í–∏–≤–æ–¥–∏–º–æ –ø—Ä–∏–∫–ª–∞–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 2-—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      const sampleData = response.data.data.slice(-2);
      console.log('üìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:', sampleData);
      
      return response.data.data;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ñ–∞–Ω–¥–∏–Ω–≥—É:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ñ–∞–Ω–¥–∏–Ω–≥—É');
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ñ–∞–Ω–¥–∏–Ω–≥—É –¥–ª—è ${symbol}:`, error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥—É –∑–∞ –ø–µ—Ä—ñ–æ–¥
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "BTC")
 * @param {number} days - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 7)
 */
export const fetchCumulativeFunding = async (symbol, days = 7) => {
  try {
    console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É –¥–ª—è ${symbol} –∑–∞ ${days} –¥–Ω—ñ–≤...`);
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    const url = `${API_BASE_URL}${ENDPOINTS.CUMULATIVE_FUNDING}?symbol=${symbol}&days=${days}`;
    console.log(`üåê URL –∑–∞–ø–∏—Ç—É: ${url}`);
    
    const startTime = Date.now();
    const response = await axios.get(url, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.success && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö:', response.data.data);
      return response.data.data;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É');
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É –¥–ª—è ${symbol}:`, error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –º–æ–Ω–µ—Ç (—Ü—ñ–Ω–∞, –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, –æ–±'—î–º)
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
export const fetchCoinsMarkets = async (symbol = '') => {
  try {
    console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö${symbol ? ` –¥–ª—è ${symbol}` : ''}...`);
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    const url = `${API_BASE_URL}${ENDPOINTS.COINS_MARKETS}${symbol ? `?symbol=${symbol}` : ''}`;
    console.log(`üåê URL –∑–∞–ø–∏—Ç—É: ${url}`);
    
    const startTime = Date.now();
    const response = await axios.get(url, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.success && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ');
      console.log(`üìä –û–±—Å—è–≥ –¥–∞–Ω–∏—Ö: ${JSON.stringify(response.data.data).length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      return response.data.data;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —ñ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
export const fetchSupportedExchangesAndPairs = async (symbol = '') => {
  try {
    console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —ñ –ø–∞—Ä${symbol ? ` –¥–ª—è ${symbol}` : ''}...`);
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    const url = `${API_BASE_URL}${ENDPOINTS.SUPPORTED_EXCHANGES_PAIRS}${symbol ? `?symbol=${symbol}` : ''}`;
    console.log(`üåê URL –∑–∞–ø–∏—Ç—É: ${url}`);
    
    const startTime = Date.now();
    const response = await axios.get(url, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.success && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –±—ñ—Ä–∂—ñ —ñ –ø–∞—Ä–∏');
      console.log('üìä –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:', response.data.data.slice(0, 2));
      return response.data.data;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —ñ –ø–∞—Ä:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —ñ –ø–∞—Ä');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —ñ –ø–∞—Ä:', error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
 * @param {string} exchange - –ù–∞–∑–≤–∞ –±—ñ—Ä–∂—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "binance")
 */
export const fetchOrderBook = async (symbol, exchange) => {
  try {
    console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è ${symbol} –Ω–∞ –±—ñ—Ä–∂—ñ ${exchange}...`);
    
    if (!API_KEY) {
      console.error('‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      throw new Error('API-–∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ');
    }
    
    const url = `${API_BASE_URL}${ENDPOINTS.ORDER_BOOK}?symbol=${symbol}&exchange=${exchange}`;
    console.log(`üåê URL –∑–∞–ø–∏—Ç—É: ${url}`);
    
    const startTime = Date.now();
    const response = await axios.get(url, createRequestConfig());
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${endTime - startTime}ms`);
    
    if (response.data && response.data.success && response.data.data) {
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä—ñ–≤');
      return response.data.data;
    }
    
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤:', response.data);
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤');
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è ${symbol} –Ω–∞ –±—ñ—Ä–∂—ñ ${exchange}:`, error);
    
    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (error.response) {
      console.error('üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
      console.error('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
      console.error('üì° –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
    }
    
    throw error;
  }
};

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –¥–æ–¥–∞—Ç–∫—É
const formatFundingData = (data) => {
  console.log('üîÑ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–∞–Ω–¥–∏–Ω–≥—É...');
  console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', Object.keys(data).slice(0, 3).map(key => ({ key, value: data[key] })));
  
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–±'—î–∫—Ç —É –º–∞—Å–∏–≤ –¥–ª—è –ª–µ–≥—à–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const formattedData = Object.values(data).map(item => {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
      const formattedItem = {
        symbol: item.symbol,
        indexPrice: item.usdPrice || item.indexPrice
      };
      
      // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ —Ñ–∞–Ω–¥–∏–Ω–≥-—Å—Ç–∞–≤–∫–∏ –∑ API
      const exchangeRates = {};
      
      // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –±—ñ—Ä–∂—ñ —Ç–∞ —ó—Ö —Å—Ç–∞–≤–∫–∏
      Object.keys(item).forEach(key => {
        if (key.includes('FundingRate') && key !== 'nextFundingRate') {
          // –ü–∞—Ä—Å–∏–º–æ –Ω–∞–∑–≤—É –±—ñ—Ä–∂—ñ –∑ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, binanceFundingRate -> binance)
          const exchangeName = key.replace('FundingRate', '');
          exchangeRates[exchangeName] = item[key];
        }
      });
      
      // –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ
      const result = {
        ...formattedItem,
        ...exchangeRates,
        // –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–Ω–¥–∏–Ω–≥ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        fundingRate: calculateAverageFunding(item)
      };
      
      return result;
    });
    
    console.log('‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', formattedData.slice(0, 2));
    
    return formattedData;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
    throw error;
  }
};

// –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–Ω–¥–∏–Ω–≥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
const calculateAverageFunding = (item) => {
  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥—É –∑ —Ä—ñ–∑–Ω–∏—Ö –±—ñ—Ä–∂
  const rates = [];
  Object.keys(item).forEach(key => {
    if (key.includes('FundingRate') && key !== 'nextFundingRate') {
      const rate = item[key];
      if (rate !== undefined && rate !== null && rate !== '-') {
        rates.push(parseFloat(rate));
      }
    }
  });
  
  if (rates.length === 0) return 0;
  
  const sum = rates.reduce((acc, rate) => acc + rate, 0);
  return sum / rates.length;
};