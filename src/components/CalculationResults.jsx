// src/components/CalculationResults.jsx
import PropTypes from 'prop-types';

function CalculationResults({ data }) {
  const ResultRow = ({ label, value, isHighlight = false, info = null }) => (
    <div className={`flex justify-between items-center p-3 rounded-lg
                    ${isHighlight ? 'bg-[rgb(var(--primary))/10] border border-[rgb(var(--primary))/20]' 
                                  : 'bg-[rgb(var(--foreground))/5]'}`
    }>
      <div className="flex flex-col">
        <span className="font-medium">{label}</span>
        {info && <span className="text-xs text-[rgb(var(--foreground))/60]">{info}</span>}
      </div>
      <span className="font-semibold">{value}</span>
    </div>
  );

  ResultRow.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    isHighlight: PropTypes.bool,
    info: PropTypes.string
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª
  const safeFormat = (num, prefix = '', suffix = '', decimals = 2) => {
    if (num === undefined || num === null) return `${prefix}0${suffix}`;
    return `${prefix}${parseFloat(num).toFixed(decimals)}${suffix}`;
  };

  return (
    <div className="space-y-3 animate-slide">
      {data.selectedSymbol && (
        <h3 className="text-lg font-semibold mb-4">
          –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è {data.selectedSymbol}
        </h3>
      )}
      
      <ResultRow 
        label="üìä –ü–æ—á–∞—Ç–∫–æ–≤–∞ –º–∞—Ä–∂–∞"
        value={safeFormat(data.initialMargin, '$')}
        info="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"
      />
      
      <ResultRow 
        label="üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –º–∞—Ä–∂–∞"
        value={safeFormat(data.recommendedMargin, '$')}
        info="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—É–º–∞ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ"
      />
      
      <ResultRow 
        label="üö® –¶—ñ–Ω–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó"
        value={safeFormat(data.liquidationPrice, '$')}
        info="–¶—ñ–Ω–∞, –ø—Ä–∏ —è–∫—ñ–π –ø–æ–∑–∏—Ü—ñ—è –±—É–¥–µ –ª—ñ–∫–≤—ñ–¥–æ–≤–∞–Ω–∞"
      />
      
      <ResultRow 
        label="üìâ –í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó"
        value={safeFormat(data.liquidationMove, '', '%')}
        info="–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –¥–ª—è –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó"
      />
      
      <ResultRow 
        label="üí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –∫–æ–º—ñ—Å—ñ—ó"
        value={safeFormat(data.totalFees, '$')}
        info="–°—É–º–∞ –∫–æ–º—ñ—Å—ñ–π –∑–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è"
      />
      
      <div className="pt-3 border-t border-[rgb(var(--border))]">
        <h4 className="text-md font-semibold mb-3">–ü—Ä–∏–±—É—Ç–æ–∫ –≤—ñ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥—É</h4>
        
        <ResultRow 
          label="ü™ô –ó–∞ 8 –≥–æ–¥–∏–Ω"
          value={safeFormat(data.estimatedFundingProfit, '$')}
          isHighlight={true}
        />
        
        <ResultRow 
          label="ü™ô –ó–∞ –¥–µ–Ω—å"
          value={safeFormat(data.estimatedDailyFundingProfit, '$')}
        />
        
        <ResultRow 
          label="ü™ô –ó–∞ –º—ñ—Å—è—Ü—å"
          value={safeFormat(data.estimatedMonthlyFundingProfit, '$')}
        />
        
        <ResultRow 
          label="ü™ô –ó–∞ —Ä—ñ–∫"
          value={safeFormat(data.estimatedYearlyFundingProfit, '$')}
        />
        
        <ResultRow 
          label="üìà –†—ñ—á–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (APR)"
          value={safeFormat(data.fundingApr, '', '%')}
          isHighlight={true}
          info="–†—ñ—á–Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥—É"
        />
      </div>
    </div>
  );
}

// –û–Ω–æ–≤–ª–µ–Ω—ñ PropTypes - –∑—Ä–æ–±–∏–º–æ –≤—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ 
// –º–∏ –¥–æ–¥–∞–ª–∏ –∑–∞—Ö–∏—Å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
CalculationResults.propTypes = {
  data: PropTypes.shape({
    selectedSymbol: PropTypes.string,
    initialMargin: PropTypes.number,
    recommendedMargin: PropTypes.number,
    liquidationPrice: PropTypes.number,
    liquidationMove: PropTypes.number,
    totalFees: PropTypes.number,
    estimatedFundingProfit: PropTypes.number,
    estimatedDailyFundingProfit: PropTypes.number,
    estimatedMonthlyFundingProfit: PropTypes.number,
    estimatedYearlyFundingProfit: PropTypes.number,
    fundingApr: PropTypes.number
  }).isRequired,
};

export default CalculationResults;