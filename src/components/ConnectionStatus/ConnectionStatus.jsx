// src/components/ConnectionStatus/ConnectionStatus.jsx
import { useState, useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import './ConnectionStatus.css';
import { useFundingData } from '../../hooks/useFundingData';
import logger from '../../services/logger';

// –¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
const NOTIFICATION_TYPES = {
  CONNECTION_LOST: 'connection_lost',
  CONNECTION_RESTORED: 'connection_restored',
  HIGH_LATENCY: 'high_latency',
  AUTH_ERROR: 'auth_error'
};

const ConnectionStatus = ({ position = 'bottom-right', showNotifications = true }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [stats, setStats] = useState(null);
  const [notification, setNotification] = useState(null);
  const [connectionHistory, setConnectionHistory] = useState([]);
  
  // Refs –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
  const wasConnected = useRef(true);
  const lastLatency = useRef(null);
  const notificationTimeout = useRef(null);
  const lastNotificationTime = useRef(null);
  
  const {
    isWebSocketConnected,
    getWebSocketLatency,
    getConnectionStats,
    requestConnectionStats,
    reconnectWebSocket
  } = useFundingData();

  const isConnected = isWebSocketConnected();
  const latency = getWebSocketLatency();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showNotification = useCallback((type, customMessage = null, duration = 5000) => {
    if (!showNotifications) return;

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const now = Date.now();
    if (lastNotificationTime.current && now - lastNotificationTime.current < 2000) {
      return;
    }
    lastNotificationTime.current = now;

    const getCurrentLatency = () => getWebSocketLatency();

    const notifications = {
      [NOTIFICATION_TYPES.CONNECTION_LOST]: {
        icon: 'üî¥',
        title: '–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ',
        message: customMessage || 'WebSocket –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ. –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è...',
        type: 'error',
        action: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏',
        persistent: true
      },
      [NOTIFICATION_TYPES.CONNECTION_RESTORED]: {
        icon: 'üü¢',
        title: '–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ',
        message: customMessage || 'WebSocket —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ',
        type: 'success',
        action: null,
        persistent: false
      },
      [NOTIFICATION_TYPES.HIGH_LATENCY]: {
        icon: 'üü°',
        title: '–ü–æ–≤—ñ–ª—å–Ω–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è',
        message: customMessage || `–í–∏—Å–æ–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: ${getCurrentLatency()}ms`,
        type: 'warning',
        action: null,
        persistent: false
      },
      [NOTIFICATION_TYPES.AUTH_ERROR]: {
        icon: 'üîë',
        title: '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó',
        message: customMessage || '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π API –∫–ª—é—á',
        type: 'error',
        action: '–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É',
        persistent: true
      }
    };

    const notificationData = notifications[type];
    if (!notificationData) return;

    setNotification({
      ...notificationData,
      id: Date.now(),
      createdAt: now
    });

    logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è WebSocket: ${notificationData.title}`, {
      type: notificationData.type,
      message: notificationData.message
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (!notificationData.persistent && duration > 0) {
      if (notificationTimeout.current) {
        clearTimeout(notificationTimeout.current);
      }
      notificationTimeout.current = setTimeout(() => {
        setNotification(null);
      }, duration);
    }
  }, [showNotifications, getWebSocketLatency]); // –£–±—Ä–∞–ª–∏ latency –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const closeNotification = () => {
    setNotification(null);
    if (notificationTimeout.current) {
      clearTimeout(notificationTimeout.current);
      notificationTimeout.current = null;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleNotificationAction = () => {
    if (!notification) return;

    if (notification.action === '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏') {
      reconnectWebSocket();
      closeNotification();
    } else if (notification.action === '–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É') {
      window.location.reload();
    }
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket  
  useEffect(() => {
    const checkConnection = () => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (isConnected !== wasConnected.current) {
        if (isConnected) {
          if (showNotifications) {
            showNotification(NOTIFICATION_TYPES.CONNECTION_RESTORED);
          }
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          setConnectionHistory(prev => [{
            time: new Date(),
            type: 'connected',
            latency: latency
          }, ...prev.slice(0, 9)]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        } else {
          if (showNotifications) {
            showNotification(NOTIFICATION_TYPES.CONNECTION_LOST);
          }
          setConnectionHistory(prev => [{
            time: new Date(),
            type: 'disconnected'
          }, ...prev.slice(0, 9)]);
        }
        wasConnected.current = isConnected;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      if (isConnected && latency !== null) {
        const isHighLatency = latency > 1000;
        const wasHighLatency = lastLatency.current && lastLatency.current > 1000;
        
        if (isHighLatency && !wasHighLatency && showNotifications) {
          showNotification(NOTIFICATION_TYPES.HIGH_LATENCY, 
            `–í–∏—è–≤–ª–µ–Ω–æ –≤–∏—Å–æ–∫—É –∑–∞—Ç—Ä–∏–º–∫—É: ${latency}ms. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è.`);
        }
        lastLatency.current = latency;
      }
    };

    const interval = setInterval(checkConnection, 2000);
    return () => clearInterval(interval);
  }, [isConnected, latency, showNotification, showNotifications]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    if (!isConnected) return;

    const updateStats = () => {
      const currentStats = getConnectionStats();
      setStats(currentStats);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      if (Date.now() % 30000 < 5000) {
        requestConnectionStats();
      }
    };

    const interval = setInterval(updateStats, 5000);
    updateStats(); // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    return () => clearInterval(interval);
  }, [isConnected]); // –¢–æ–ª—å–∫–æ isConnected –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  const getStatusColor = () => {
    if (!isConnected) return 'red';
    if (latency === null) return 'yellow';
    if (latency < 100) return 'green';
    if (latency < 300) return 'yellow';
    return 'orange';
  };

  const getStatusText = () => {
    if (!isConnected) return '–í—ñ–¥–∫–ª—é—á–µ–Ω–æ';
    if (latency === null) return '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
    return `${latency}ms`;
  };

  const formatUptime = (seconds) => {
    if (!seconds) return 'N/A';
    if (seconds < 60) return `${seconds}s`;
    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ${seconds % 60}s`;
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('uk-UA', { 
      hour: '2-digit', 
      minute: '2-digit',
      second: '2-digit' 
    });
  };

  const handleToggle = () => {
    setIsExpanded(!isExpanded);
    if (!isExpanded && isConnected) {
      // –ó–∞–ø–∏—Ç—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ
      setTimeout(() => {
        if (isWebSocketConnected()) {
          requestConnectionStats();
        }
      }, 100);
    }
  };

  return (
    <>
      {/* –ì–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      <div className={`connection-status ${position} ${isExpanded ? 'expanded' : ''}`}>
        <div 
          className="connection-indicator"
          onClick={handleToggle}
          title={isConnected ? `WebSocket: ${getStatusText()}` : 'WebSocket –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ'}
        >
          <div className={`status-dot ${getStatusColor()}`}></div>
          <span className="status-text">{getStatusText()}</span>
          {!isConnected && (
            <button
              className="reconnect-button"
              onClick={(e) => {
                e.stopPropagation();
                reconnectWebSocket();
              }}
              title="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏"
            >
              üîÑ
            </button>
          )}
        </div>
        
        {isExpanded && (
          <div className="connection-details">
            <div className="details-header">
              <h4>–°—Ç–∞—Ç—É—Å WebSocket</h4>
              <button 
                className="close-button"
                onClick={() => setIsExpanded(false)}
                aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
              >
                √ó
              </button>
            </div>
            
            <div className="details-content">
              <div className="detail-section">
                <h5>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω</h5>
                <div className="detail-row">
                  <span className="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                  <span className={`detail-value status-${getStatusColor()}`}>
                    {isConnected ? 'üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ'}
                  </span>
                </div>
                
                {latency !== null && (
                  <div className="detail-row">
                    <span className="detail-label">–ó–∞—Ç—Ä–∏–º–∫–∞:</span>
                    <span className="detail-value">{latency}ms</span>
                  </div>
                )}
              </div>

              {stats && (
                <div className="detail-section">
                  <h5>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó</h5>
                  <div className="detail-row">
                    <span className="detail-label">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</span>
                    <span className="detail-value">{formatUptime(stats.sessionDuration)}</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="detail-label">Ping/Pong:</span>
                    <span className="detail-value">
                      {stats.pongCount}/{stats.pingCount}
                    </span>
                  </div>
                  
                  {stats.averageLatency && (
                    <div className="detail-row">
                      <span className="detail-label">–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∞:</span>
                      <span className="detail-value">{Math.round(stats.averageLatency)}ms</span>
                    </div>
                  )}
                  
                  <div className="detail-row">
                    <span className="detail-label">–ü—ñ–¥–ø–∏—Å–∫–∞:</span>
                    <span className="detail-value">
                      {stats.isSubscribed ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                    </span>
                  </div>
                  
                  {stats.missedPongs > 0 && (
                    <div className="detail-row">
                      <span className="detail-label">–ü—Ä–æ–ø—É—â–µ–Ω–æ pong:</span>
                      <span className="detail-value warning">{stats.missedPongs}</span>
                    </div>
                  )}
                </div>
              )}

              {connectionHistory.length > 0 && (
                <div className="detail-section">
                  <h5>–Ü—Å—Ç–æ—Ä—ñ—è –∑'—î–¥–Ω–∞–Ω—å</h5>
                  <div className="connection-history">
                    {connectionHistory.map((entry, index) => (
                      <div key={index} className="history-item">
                        <span className={`history-status ${entry.type}`}>
                          {entry.type === 'connected' ? 'üü¢' : 'üî¥'}
                        </span>
                        <span className="history-time">{formatTime(entry.time)}</span>
                        {entry.latency && (
                          <span className="history-latency">{entry.latency}ms</span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {import.meta.env.DEV && (
                <div className="detail-section">
                  <h5>Debug</h5>
                  <div className="detail-row">
                    <span className="detail-label">–†–µ–∂–∏–º:</span>
                    <span className="detail-value">üõ†Ô∏è Development</span>
                  </div>
                  <button 
                    className="debug-action-button"
                    onClick={() => reconnectWebSocket()}
                  >
                    üîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—è
                  </button>
                </div>
              )}
            </div>
            
            <div className="details-footer">
              <small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥</small>
            </div>
          </div>
        )}
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notification && showNotifications && (
        <div className={`connection-notification notification-${notification.type}`}>
          <div className="notification-content">
            <div className="notification-header">
              <span className="notification-icon">{notification.icon}</span>
              <span className="notification-title">{notification.title}</span>
              <button
                className="notification-close"
                onClick={closeNotification}
                aria-label="–ó–∞–∫—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
              >
                √ó
              </button>
            </div>
            
            <div className="notification-message">
              {notification.message}
            </div>
            
            {notification.action && (
              <div className="notification-actions">
                <button
                  className="notification-action-button"
                  onClick={handleNotificationAction}
                >
                  {notification.action}
                </button>
              </div>
            )}
          </div>
          
          {!notification.persistent && (
            <div className="notification-progress" />
          )}
        </div>
      )}
    </>
  );
};

ConnectionStatus.propTypes = {
  position: PropTypes.oneOf([
    'top-left', 'top-right', 
    'bottom-left', 'bottom-right'
  ]),
  showNotifications: PropTypes.bool
};

export default ConnectionStatus;